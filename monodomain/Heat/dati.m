%=======================================================================================================
% This contain all the information for running main
% TEMPLATE OF THE STRUCT DATI
%=======================================================================================================
%
%  DATI= struct( 'name',              % set the name of the test  
%                'method',            % (string) e.g. 'SIP','NIP'or 'IIP'
%                'Domain',            % set the domain [x1,x2;y1,y2]
%                'exact_sol',         % set the exact solution
%                'source',            % set the forcing term
%                'grad_exact_1',      % set the first componenet of the gradient of the exact solution
%                'grad_exact_2',      % set the second componenet of the gradient of the exact solution
%                'fem',               % set finite element space (e.g.,
%                'P1', 'P2', 'P3')
%                'penalty_coeff'      % (real) penalty pearameter
%                'nqn',               % (integer) number of 1D Gauss-Ledendre quadrature nodes in 1 
%                       dimension [1,2,3,4,5,6,.....]
%                'nqn_2D',          % number of quadrature nodes for integrals over elements
%========================================================================================================

function [DATA] = dati(test)

if test=='Test1' % test evoluzione calore
    
DATA = struct( 'name',             test,...
               ... % Test name
               'method',           'SIP',...  
               ... % Set DG discretization
               'domain',           [0,1;0,1],...
               ... % Reaction term
                'T',              1, ...
               ... % Final time 
               'dt',            0.0001, ...
               ... % Time step 
               'theta',             1, ...
               ... % Theta-method ...
               'initialcond',      '0.*x.*y', ...
               ... % Initial condition 
               'exact_sol',        '0.*x.*y.*t',...
               ... % Definition of exact solution
               'source',           '0.*x.*y.*t',...
               ... % Forcing term in time
               'Neumann',           '100000.*(x<0.3).*(y<=0.3).*(t<=0.001)',...
               ... % Boundary condition
               'grad_exact_1',     '0.*x.*y.*t',... 
               ... % Definition of exact gradient (x comp) 
               'grad_exact_2',     '0.*x.*y.*t',...    
               ... % Definition of exact gradient (y comp)
               'Sigma',             0.12,...
               ... % Diffusion scalar parameter
               'fem',              'P1',...   
               ... % Finite element space (choices 'P1,'D1','P2','D2', 'P3','D3')
               'penalty_coeff',     10,... 
               ... % Penalty coefficient
               'nqn',               4, ...
               ... % Number of 1d GL quadrature nodes
               'snapshot',          'Y',...
               ... % Snapshot of the solution
               'leap',               200 ...
               ... % Number of time steps between one snapshot and the successive
               );
elseif test=='Test2' % test convergenza calore
DATA = struct( 'name',             test,...
               ... % Test name
               'method',           'SIP',...  
               ... % Set DG discretization
               'domain',           [0,1;0,1],...
               ... % Reaction term
                'T',               0.01, ...
               ... % Final time 
               'dt',            0.001, ...
               ... % Time step 
               'theta',             1, ...
               ... % Theta-method ...
               'initialcond',      'sin(2*pi*x).*sin(2*pi*y)', ...
               ... % Initial condition 
               'exact_sol',        'sin(2*pi*x).*sin(2*pi*y).*exp(-5*t)',...
               ... % Definition of exact solution
               'source',           'sin(2*pi*x).*sin(2*pi*y).*exp(-5*t).*(-5+sigma*8*pi^2)',...
               ... % Forcing term in time
               'Neumann',           '-2*pi*sin(2*pi*x).*cos(2*pi*y).*exp(-5*t).*sigma.*(y==0) + 2*pi*cos(2*pi*x).*sin(2*pi*y).*exp(-5*t).*sigma.*(x==1) + 2*pi*sin(2*pi*x).*cos(2*pi*y).*exp(-5*t).*sigma.*(y==1) -  2*pi*cos(2*pi*x).*sin(2*pi*y).*exp(-5*t).*sigma.*(x==0)',...
               ... % Boundary condition
               'grad_exact_1',     '2*pi*cos(2*pi*x).*sin(2*pi*y).*exp(-5*t)',... 
               ... % Definition of exact gradient (x comp) 
               'grad_exact_2',     '2*pi*sin(2*pi*x).*cos(2*pi*y).*exp(-5*t)',...    
               ... % Definition of exact gradient (y comp)
               'Sigma',             1,...
               ... % Diffusion scalar parameter
               'fem',              'D1',...   
               ... % Finite element space (choices 'P1,'D1','P2','D2', 'P3','D3')
               'penalty_coeff',     10,... 
               ... % Penalty coefficient
               'nqn',               4, ...
               ... % Number of 1d GL quadrature nodes
               'snapshot',          'N',...
               ... % Snapshot of the solution
               'leap',               40 ...
               ... % Number of time steps between one snapshot and the successive
               );
          
end
